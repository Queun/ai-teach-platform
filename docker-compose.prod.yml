# ==========================================
# Docker Compose - 生产环境配置
# AI教育平台完整服务栈
# ==========================================
version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: ai_edu_postgres_prod
    environment:
      POSTGRES_DB: ai_edu_platform
      POSTGRES_USER: ${DATABASE_USERNAME:-strapi}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-strapi123}
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - ai_edu_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U strapi -d ai_edu_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 800M
        reservations:
          cpus: '0.3'
          memory: 400M

  # Strapi后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai_edu_backend_prod
    environment:
      NODE_ENV: production
      NODE_OPTIONS: "--max-old-space-size=1024"
      DATABASE_CLIENT: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ai_edu_platform
      DATABASE_USERNAME: ${DATABASE_USERNAME:-strapi}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-strapi123}
      DATABASE_SSL: "false"
      HOST: 0.0.0.0
      PORT: 1337
      # 从环境变量读取敏感配置
      APP_KEYS: ${STRAPI_APP_KEYS}
      API_TOKEN_SALT: ${STRAPI_API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${STRAPI_ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: ${STRAPI_TRANSFER_TOKEN_SALT}
      JWT_SECRET: ${STRAPI_JWT_SECRET}
      ENCRYPTION_KEY: ${STRAPI_ENCRYPTION_KEY}
    volumes:
      - strapi_uploads:/app/public/uploads
      - strapi_cache:/app/.cache
    ports:
      - "${STRAPI_PORT:-1337}:1337"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ai_edu_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "node -e 'process.exit(0)'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 800M
        reservations:
          cpus: '0.3'
          memory: 400M

  # Next.js前端服务
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_edu_frontend_prod
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_STRAPI_URL: ${NEXT_PUBLIC_STRAPI_URL:-/api}
      NEXT_PUBLIC_STRAPI_TOKEN: ${NEXT_PUBLIC_STRAPI_TOKEN}
      STRAPI_API_TOKEN: ${STRAPI_API_TOKEN}
      # 其他前端环境变量
      PORT: 3000
      HOSTNAME: "0.0.0.0"
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ai_edu_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.6'
          memory: 600M
        reservations:
          cpus: '0.2'
          memory: 200M

  # Nginx反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: ai_edu_nginx_prod
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_cache:/var/cache/nginx
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend
    networks:
      - ai_edu_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

# 数据卷定义
volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  strapi_uploads:
    driver: local
  strapi_cache:
    driver: local
  nginx_cache:
    driver: local

# 网络定义
networks:
  ai_edu_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16